version: '3.8'
 
services:
  
  web:
    container_name: models
    build:
      context: .
      
    command: python manage.py runserver 0.0.0.0:8000

    ports:
      - "8001:8000"  
    depends_on:
      - db  
    
    environment:
      - DB_HOST=db
      - DB_NAME=mydatabase
      - DB_USER=root
      - DB_PASSWORD=root
 
 
  db:
    container_name: mysql
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: root  
      MYSQL_DATABASE: mydatabase
    
 
  
  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf 
    ports:
      - "81:80"  
    depends_on:
      - web  



'''
version: "3"
 
services:
  app1:
    container_name: iam1
    build:
      context: .
    ports:
      - "8001:8000"
   
 
  app2:
    container_name: iam2
    build:
      context: .
    ports:
      - "8002:8000"
   
 
  app3:
    container_name: iam3
    build:
      context: .
    ports:
      - "8003:8000"
   
 
  app4:
    container_name: iam4
    build:
      context: .
    ports:
      - "8004:8000"
   
       
 
  app5:
    container_name: iam5
    build:
      context: .
    ports:
      - "8005:8000"
   
 
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  
    ports:
      - "80:80"  
    depends_on:
      - app1
      - app2
      - app3
      - app4
      - app5






http{
    upstream  django {
        server iam1:8000;
        server iam2:8000;
        server iam3:8000;
        server iam4:8000;
        server iam5:8000;
    }
 
log_format upstreamlog '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          '"$upstream_addr"';
 
    # Specify access log path and log format
    access_log /var/log/nginx/access.log upstreamlog;
server{
listen 80;
location / {
proxy_pass http://django;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
}
}
}
events{}

'''